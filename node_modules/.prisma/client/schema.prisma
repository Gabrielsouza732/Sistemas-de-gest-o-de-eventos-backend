// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // <--- MUDANÇA AQUI: sqlite → postgresql
  url      = env("DATABASE_URL")
}

model Event {
  id                 String    @id @default(cuid())
  title              String
  description        String?
  startDate          DateTime?
  endDate            DateTime?
  location           String?
  requester          String?
  organizer          String?
  eventType          String?
  eventFormat        String?
  priority           String?
  status             String    @default("Aguardando")
  estimatedBudget    Float?
  estimatedAttendees Int?
  costCenter         String?
  notes              String?
  responsible        String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relacionamentos
  checklistItems ChecklistItem[]
  comments       Comment[]
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  responsibleChecklistItems ChecklistItem[] @relation("ResponsibleUser")
  authoredComments          Comment[]       @relation("CommentAuthor")
}

model ChecklistItem {
  id            String    @id @default(cuid())
  text          String
  completed     Boolean   @default(false)
  dueDate       DateTime?
  responsible   String? // Nome do responsável (texto livre)
  responsibleId String? // ID do usuário responsável (referência)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relacionamentos
  event           Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId         String
  responsibleUser User?  @relation("ResponsibleUser", fields: [responsibleId], references: [id])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  author    String
  authorId  String? // ID do usuário que criou o comentário
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  authorUser User? @relation("CommentAuthor", fields: [authorId], references: [id])
}

model ChecklistTemplate {
  id          String                  @id @default(cuid())
  eventType   String                  @unique
  name        String
  description String?
  items       ChecklistTemplateItem[]
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
}

model ChecklistTemplateItem {
  id         String            @id @default(cuid())
  text       String
  daysOffset Int // Dias antes da data do evento (negativo = antes, positivo = depois)
  templateId String
  template   ChecklistTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}
